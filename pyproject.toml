[project]
name            = "instal"
version         = "0.1.1"
description     = "InstAL: Institutional Action Language Framework and Tools"
readme          = "README.md"
requires-python = ">=3.12"
license         = {text="GPLv3"}
keywords        = []
authors         = [
                {email = "jgrey4296@gmail.com", name  = "jgrey"},
                {name = "InstAL team @ University of Bath"}
                ]
classifiers     = [
"Programming Language :: Python"
]

dependencies   = [
    "clingo>=5.7.1",
    "jgdv>=1.0.1",
    "networkx>=3.4.2",
    "pyparsing>=3.2.3",
]

[project.optional-dependencies]
dev = [
    "myst-parser>=4.0.1",
    "pytest>=8.3.5",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "sphinx>=8.2.3",
    "sphinx-rtd-theme>=3.0.2",
]

[project.urls]
homepage      = "http://instsuite.github.io/"
documentation = "https://instal.readthedocs.io/en/latest"
repository    = "https://github.com/jgrey4296/instal"
changelog     = "https://github.com/jgrey4296/instal/spam/blob/master/CHANGELOG.md"

##-- scripts
[project.scripts]
# keep these and __main__ synced
instal         = "instal.__main__:main"
instalc        = "instal.cli.compiler:main"
instalq        = "instal.cli.query:main"
instalf        = "instal.cli.filter:main"
instalr        = "instal.cli.reporter:main"
instalv        = "instal.cli.generate_visitors:main"

[project.gui-scripts]
# spam-gui      = "spam:main_gui"

[project.entry-points."nothing"]
# tomatoes      = "spam:main_tomatoes"

##-- end scripts

##-- build-system
[build-system]
requires       = ["hatchling>=1.13"]
build-backend  = "hatchling.build"

[tool.hatch.build]
skip-excluded-dirs  = true
# directory           = ".temp/build"  # or HATCH_BUILD_LOCATION

[tool.hatch.build.targets.sdist]
packages   = ["instal"]
artifacts  = ["*.so"]
exclude    = [
    ".temp", "**.rst",
    "instal/*/__tests", "instal/_docs", "instal/__tests",
]

[tool.hatch.build.targets.wheel]
packages   = ["instal"]
artifacts  = ["*.so"]
exclude    = [
    ".temp", "**.rst",
    "instal/*/__tests", "instal/__tests",
    "instal/_docs",
]

##-- end build-system

# Tools #######################################################################

##-- pytest
# https://docs.pytest.org/en/stable/reference/reference.html#ini-options-ref
[tool.pytest.ini_options]
addopts          = [
  # "--cov=",
  # "--ignore-glob=related_/*"
]
cache_dir       = ".temp/pytest_cache"
log_file        = ".temp/logs/pytest.log"

log_cli         = false
log_level       = "DEBUG"
log_cli_level   = "INFO"
log_format      = "%(levelname)s %(name)s : %(message)s"
log_file_level  = "DEBUG"
log_file_format = "%(asctime)s %(levelname)s %(name)s : %(message)s"

##-- end pytest

##-- coverage
# https://pytest-cov.readthedocs.io/en/latest/config.html
# add "addopts = '--cov-report xml --cov={}' " for pytest
[tool.coverage.run]
branch            = true  # measure branch coverage
cover_pylib       = false # measure stdlib
relative_files    = false 
data_file         = ".temp/coverage/coverage_cache" # cache
disable_warnings  = []
omit              = [ # files to not measure
    "*/__tests/*",
    "*__init__.py",
    "*_interface.py",
    
] 

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",
    "^import",
    "^from",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if False:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    ]

ignore_errors = true
# fail_under  = 20 # coverage percentage
format        = "text" # or "markdown", "total"
show_missing  = true # for in the report
skip_empty    = true # skip files like __init__.py

[tool.coverage.html]
directory = ".temp/coverage/html_report" # where to write output

[tool.coverage.xml]
output    = ".temp/coverage/coverage.xml" # where to write output

[tool.coverage.json]
output        = ".temp/coverage/coverage.json"  # where to write output
pretty_print  = true
##-- end coverage

##-- mypy
# https://mypy.readthedocs.io/en/stable/config_file.html
  [tool.mypy]
strict                  = false
python_version          = "3.12"
python_executable       = ".venv/bin/python"
cache_dir               = "~/_cache_/mypy"
incremental             = true
follow_imports          = "silent"
follow_untyped_imports  = true
ignore_missing_imports  = false
enable_error_code       = [
    "explicit-override", "ignore-without-code",
    "possibly-undefined", "unreachable",
    "type-arg",
    ]
disable_error_code   = []
exclude              = ["builtins.pyi"]

warn_return_any      = true
warn_unused_configs  = true

# Per-module options:
# [[tool.mypy.overrides]]
# module             = "blah"
# disallow_untyped_defs = true

##-- end mypy

##-- isort
# https://pycqa.github.io/isort/docs/configuration/options.html
[tool.isort]
color_output           = false
py_version             = 311
# profile                = "hug"
comment_prefix         = "# "
sections               = [
"FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"
]
default_section        = "THIRDPARTY"
lines_after_imports    = -1
lines_between_sections = 1
lines_between_types    = 0

import_heading_future      = "Imports:"
import_heading_stdlib      = "##-- stdlib imports"
import_heading_thirdparty  = "##-- 3rd party imports"
import_heading_firstparty  = "##-- 1st party imports"
import_heading_localfolder = ""

import_footer_future      = ""
import_footer_stdlib      = "##-- end stdlib imports"
import_footer_thirdparty  = "##-- end 3rd party imports"
import_footer_firstparty  = "##-- end 1st party imports"
import_footer_localfolder = ""

add_imports            = []

##-- end isort

##-- uv
[tool.uv]

[tool.uv.sources]

[dependency-groups]
dev = [
    "ipython>=9.4.0",
    "sh>=2.2.2",
    "towncrier>=24.8.0",
    ]
test =[
    "pydot>=4.0.1",
    "pytest>=8.3.5",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "tox>=4.28.4",
    "tox-uv>=1.27.0",
    "ruff>=0.12.8",
]
docs = [
    "myst-parser>=4.0.1",
    "sphinx>=8.2.3",
    "sphinx-autoapi>=3.6.0",
    "sphinx-rtd-theme>=3.0.2",
    "pydot>=4.0.1",
    "tox>=4.28.4",
    "tox-uv>=1.27.0",
]
##-- end uv
