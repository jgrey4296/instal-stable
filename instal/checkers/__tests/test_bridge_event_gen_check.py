#!/usr/bin/env python3
"""

"""
##-- imports
from __future__ import annotations

import logging as logmod
import pathlib
import unittest
import warnings
from importlib.resources import files
from typing import (Any, Callable, ClassVar, Generic, Iterable, Iterator,
                    Mapping, Match, MutableMapping, Sequence, Tuple, TypeAlias,
                    TypeVar, cast)
from unittest import mock

from instal.checkers.bridge_event_gen_check import BridgeEventGenCheck
from instal.interfaces import ast as iAST
from instal.interfaces import checker
from instal.parser.v2.parser import InstalPyParser
from instal.parser.v2.utils import TERM

##-- end imports

##-- warnings
with warnings.catch_warnings():
    warnings.simplefilter("ignore")
    pass
##-- end warnings
logging = logmod.root
##-- data
data_path = files("instal.checkers.__tests.__data")
##-- end data



class TestBridgeEventGenCheck(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        LOGLEVEL      = logmod.DEBUG
        LOG_FILE_NAME = "log.{}".format(pathlib.Path(__file__).stem)

        cls.file_h        = logmod.FileHandler(LOG_FILE_NAME, mode="w")
        cls.file_h.setLevel(LOGLEVEL)

        logging.setLevel(logmod.NOTSET)
        logging.addHandler(cls.file_h)


    @classmethod
    def tearDownClass(cls):
        logging.removeHandler(cls.file_h)

    def test_initial_ctor_with_checker(self):
        runner = checker.InstalCheckRunner([ BridgeEventGenCheck() ])
        self.assertIsInstance(runner, checker.InstalCheckRunner)
        self.assertIsNotNone(runner.checkers)

    def test_basic_pass(self):
        """
        Check no reports are generated by default
        """
        file_name = "bridge_structure_basic.iab"
        runner    = checker.InstalCheckRunner([ BridgeEventGenCheck() ])

        text = data_path.joinpath(file_name).read_text()
        data = InstalPyParser().parse_bridge(text, parse_source=file_name)
        self.assertIsInstance(data[0], iAST.InstitutionDefAST)

        result = runner.check(data)
        self.assertFalse(result)

    def test_basic_with_rules_fail(self):
        """
        Check no reports are generated by default
        """
        file_name = "bridge_event_gen_rules.iab"
        runner    = checker.InstalCheckRunner([ BridgeEventGenCheck() ])

        text = data_path.joinpath(file_name).read_text()
        data = InstalPyParser().parse_bridge(text, parse_source=file_name)
        self.assertIsInstance(data[0], iAST.InstitutionDefAST)

        with self.assertRaises(Exception) as cm:
            runner.check(data)

        the_exc = cm.exception
        results = the_exc.args[1]
        self.assertTrue(results)
        self.assertIn(logmod.ERROR, results)
        self.assertEqual(len(results[logmod.ERROR]), 2)

    def test_basic_with_rules_pass(self):
        """
        Check no reports are generated by default
        """
        bridge_file_name = "bridge_event_gen_rules.iab"
        inst_file_name   = "bridge_event_gen_insts.ial"
        parser    = InstalPyParser()
        runner    = checker.InstalCheckRunner([ BridgeEventGenCheck() ])

        bridge_text = data_path.joinpath(bridge_file_name).read_text()
        bridge_data = parser.parse_bridge(bridge_text, parse_source=bridge_file_name)

        inst_text   = data_path.joinpath(inst_file_name).read_text()
        inst_data   = parser.parse_institution(inst_text, parse_source=inst_file_name)

        self.assertIsInstance(bridge_data[0], iAST.BridgeDefAST)
        self.assertTrue(inst_data)

        results = runner.check(bridge_data + inst_data)

        self.assertFalse(results)



if __name__ == '__main__':
    unittest.main()
