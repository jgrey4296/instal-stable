#!/usr/bin/env python3
"""

"""
##-- imports
from __future__ import annotations

import logging as logmod
import pathlib
import warnings
from importlib.resources import files
from typing import (Any, Callable, ClassVar, Generic, Iterable, Iterator,
                    Mapping, Match, MutableMapping, Sequence, Tuple, TypeAlias,
                    TypeVar, cast)
##-- end imports

import pytest
from instal.validate.bridge_event_gen_validator import BridgeEventGenValidator
from instal.interfaces import ast as iAST
from instal.interfaces import validate
from instal.parser.v2.parser import InstalPyParser

logging = logmod.root

##-- data
data_path = files("instal.validate.__tests.__data")
##-- end data

parser = InstalPyParser()

class TestBridgeEventGenValidator:

    def test_initial_ctor_with_validator(self):
        runner = validate.InstalValidatorRunner([ BridgeEventGenValidator() ])
        assert(isinstance(runner, validate.InstalValidatorRunner))
        assert(runner.validators is not None)

    def test_basic_pass(self):
        """
        Validator no reports are generated by default
        """
        file_name = data_path / "bridge_structure_basic.iab"
        runner    = validate.InstalValidatorRunner([ BridgeEventGenValidator() ])

        data = parser.parse_bridge(file_name)
        assert(isinstance(data[0], iAST.InstitutionDefAST))

        result = runner.validate(data)
        assert(not result)

    def test_basic_with_rules_fail(self):
        """
        Validator no reports are generated by default
        """
        file_name_bridge = data_path / "bridge_event_gen_rules.iab"
        file_name_insts  = data_path / "bridge_basic_sourceSinks.ial"
        runner           = validate.InstalValidatorRunner([ BridgeEventGenValidator() ])

        bridge_data      = parser.parse_bridge(file_name_bridge)
        inst_data        = parser.parse_institution(file_name_insts)

        assert(isinstance(bridge_data[0], iAST.BridgeDefAST))
        assert(isinstance(inst_data[0], iAST.InstitutionDefAST))

        with pytest.raises(Exception) as cm:
            runner.validate(bridge_data + inst_data)

        the_exc = cm.exception
        results = the_exc.args[1]
        assert(results)
        assert(logmod.ERROR in results)
        assert(len(results[logmod.ERROR]) == 2)

    def test_basic_with_rules_pass(self):
        """
        Validator no reports are generated by default
        """
        bridge_file_name = data_path / "bridge_event_gen_rules.iab"
        inst_file_name   = data_path / "bridge_event_gen_insts.ial"
        runner    = validate.InstalValidatorRunner([ BridgeEventGenValidator() ])

        bridge_data = parser.parse_bridge(bridge_file_name)
        inst_data   = parser.parse_institution(inst_file_name)

        assert(isinstance(bridge_data[0], iAST.BridgeDefAST))
        assert(inst_data)

        results = runner.validate(bridge_data + inst_data)

        assert(not results)
